<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[My Octopress Blog]]></title>
  <link href="http://katieishibashi.github.io/atom.xml" rel="self"/>
  <link href="http://katieishibashi.github.io/"/>
  <updated>2013-06-10T18:10:03-04:00</updated>
  <id>http://katieishibashi.github.io/</id>
  <author>
    <name><![CDATA[Your Name]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Playing Well With Others]]></title>
    <link href="http://katieishibashi.github.io/blog/2013/06/10/playing-well-with-others/"/>
    <updated>2013-06-10T00:00:00-04:00</updated>
    <id>http://katieishibashi.github.io/blog/2013/06/10/playing-well-with-others</id>
    <content type="html"><![CDATA[<p>Group coding at The Flatiron School was new to me. I&rsquo;ve had several jobs in the past that have involved coding, and they have never been exactly social. Generally, I would meet with non-techies to find out what kind of web thing they, and go back to my desk and make said thing. That was the entire action sequence. I learned a lot this way, in part because the nonprofits I worked for often had no one else on staff who could solve a problem. It was me and Google. I learned quite a bit this way, though this meant I had to learn much later in life not to write code that irritates other programmers. Someday, I shall introduce you to my session variable named George.</p>

<p>The biggest drawback to being a lone wolf is you completely miss the osmosis-type learning that occurs when you have other coders around you. If a technique did not come up when you were frantically searching Google for answers, you can easily miss it entirely. It&rsquo;s also true that there&rsquo;s no one to cross-examine you, and it&rsquo;s easy to stop working once the damn thing works, even if it&rsquo;s massively inefficient.</p>

<p>When I came to Flatiron, The closest I&rsquo;ve ever come to collaborating with someone on a web endeavor has been something like &ldquo;OK, you do the navigation, and I&rsquo;ll do the footer.&rdquo;</p>

<h1>Pros:</h1>

<p>Different strengths
This includes the obvious, like people knowing languages you don&rsquo;t know, but it&rsquo;s also incredibly beneficial to work with people who think in a different way than you do. I&rsquo;ve only been team coding for a week, and already there have been several times when I&rsquo;ve watched others easily solve problems that had me staring blankly, and vice versa.</p>

<p>Your random eccentricities don&rsquo;t seep into code as much
There&rsquo;s no way you could get away with naming a variable George in a group.</p>

<p>It&rsquo;s ridiculously easy to ask for help.
At Flatiron, we often hear a lecture on a topic and then go to code in a group, and if there&rsquo;s something in the lecture I don&rsquo;t understand, there&rsquo;s always someone in the group who can explain it to me.</p>

<p>Group jokes!
We just wrote a program that tells the user it&rsquo;s deleting their entire hard drive if they enter invalid input, and then stuck it on some likely marks. It was AMAZING. I occasionally tried to do this when I was on my own, but the joy did not compare. Jokes are funnier with many people in on them.</p>

<h1>Cons:</h1>

<p>Other people&rsquo;s random eccentricities sneak into the code, and you do not find them as charming as your own eccentricities
Even though it&rsquo;s harder to put your own eccentric touch on code in a group (Hi, George!), you do sometimes get outvoted in a group, and then have to sit there as the group goes down what you view as a strange path. There is very little you can do about this.</p>

<p>When a group gets bogged down, it REALLY gets bogged down
Taking detours as an individual is bad enough, but taking an irrelevant detour with the weight of four, really hard core people speeding along Detour Road means that you can get SERIOUSLY bogged down, because now you not only have to think about and code the detour, you also sit and discuss said detour. You can write not only write test code to implement your detour, you can write four different versions of it, and then you can sit around discussing  all of them for hours.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ZOOM]]></title>
    <link href="http://katieishibashi.github.io/blog/2013/06/05/zoom/"/>
    <updated>2013-06-05T13:07:00-04:00</updated>
    <id>http://katieishibashi.github.io/blog/2013/06/05/zoom</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Goat cheese]]></title>
    <link href="http://katieishibashi.github.io/blog/2013/06/05/goat-cheese/"/>
    <updated>2013-06-05T13:07:00-04:00</updated>
    <id>http://katieishibashi.github.io/blog/2013/06/05/goat-cheese</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Am I doing this right?]]></title>
    <link href="http://katieishibashi.github.io/blog/2013/06/05/am-i-doing-this-right/"/>
    <updated>2013-06-05T13:00:00-04:00</updated>
    <id>http://katieishibashi.github.io/blog/2013/06/05/am-i-doing-this-right</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Zombie Ninjas Attack: A survivor's retrospective]]></title>
    <link href="http://katieishibashi.github.io/blog/2013/06/05/zombie-ninjas-attack-a-survivors-retrospective/"/>
    <updated>2013-06-05T11:05:00-04:00</updated>
    <id>http://katieishibashi.github.io/blog/2013/06/05/zombie-ninjas-attack-a-survivors-retrospective</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[title]]></title>
    <link href="http://katieishibashi.github.io/blog/2013/06/05/title/"/>
    <updated>2013-06-05T11:05:00-04:00</updated>
    <id>http://katieishibashi.github.io/blog/2013/06/05/title</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
</feed>
