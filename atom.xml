<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Katie on Rails]]></title>
  <link href="http://katieishibashi.github.io/atom.xml" rel="self"/>
  <link href="http://katieishibashi.github.io/"/>
  <updated>2013-09-05T17:33:33-04:00</updated>
  <id>http://katieishibashi.github.io/</id>
  <author>
    <name><![CDATA[Katie Barry Ishibashi]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Stupid Ruby Array Tricks]]></title>
    <link href="http://katieishibashi.github.io/blog/2013/09/05/stupid-ruby-array-tricks/"/>
    <updated>2013-09-05T17:27:00-04:00</updated>
    <id>http://katieishibashi.github.io/blog/2013/09/05/stupid-ruby-array-tricks</id>
    <content type="html"><![CDATA[<p>While checking out the <a href="http://onestepback.org/vital_testing/" target="_blank">Ruby katas</a>, I came across a puzzle that involved comparing two arrays, and was on the verge of writing long, convoluted if statements when it occurred to me that any language as elegant as Ruby must have better ways of doing things. Indeed it does. For example:</p>

<p><b>Check to see if 2 arrays have any matches, in 3ish lines of code</b></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>array1=["Cookie Monster","Big Bird", "Grover"]
</span><span class='line'>array2=["Snuffy","Cookie Monster", "Elmo"]
</span><span class='line'>intersection=array1&array2
</span></code></pre></td></tr></table></div></figure>


<p><b>Intersection</b> will equal all the correct responses, in this case, Cookie Monster.
(<a href="http://stackoverflow.com/questions/5013880/ruby-compare-2-arrays-for-matches-and-count-the-number-of-match-instances" target="_blank">From Stack Overflow</a>)</p>

<p>This method has two cousins. One is difference, which lets you &ldquo;subtract&rdquo; items from array1 that are also in array2:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>difference=array1-array2
</span><span class='line'>difference= ["Big Bird", "Grover"] </span></code></pre></td></tr></table></div></figure>


<p>The other is <b>union</b>, which concatenates the two arrays but removes duplicates:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>array | array2= 
</span><span class='line'>["Cookie Monster", "Big Bird", "Grover", "Snuffy", "Elmo"]</span></code></pre></td></tr></table></div></figure>


<p>Puttering about the Internet a litte bit, I also found this<a href="http://blog.taian.su/201209/the-beauty-of-ruby-array-tricks-i/" target="_blank"> post in Japanese</a>. I could read only the code, but it&rsquo;s there that I discovered <b>mass shuffling</b>. For example,</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>array1&lt;&lt;"a horse"&lt;&lt; "a truck" = 
</span><span class='line'>["Cookie Monster", "Big Bird", "Grover", "a horse", "a truck"]</span></code></pre></td></tr></table></div></figure>


<p>The final trick I learned lets you autogenerate an array of a range of numbers. To whit:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[*1..10] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] </span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Why is Code in English?]]></title>
    <link href="http://katieishibashi.github.io/blog/2013/08/01/why-is-code-in-english/"/>
    <updated>2013-08-01T23:16:00-04:00</updated>
    <id>http://katieishibashi.github.io/blog/2013/08/01/why-is-code-in-english</id>
    <content type="html"><![CDATA[<p>Most of it has to do with not reinventing the wheel. What we think of as the web&rsquo;s underpinnings was created by Woodstock-era American engineers and later spread to engineers and scientists in England and Europe, where it reached an audience that wrote in the Roman alphabet, and was largely comfortable with English. It didn&rsquo;t become interesting to a larger audience until the early 90s, when Briton Tim Berners-Lee invented HTML, an accessible language that allowed relatively non-technical people to create and read pages on the web without typing lots and lots of things into a command line.</p>

<p>When Tim Berners-Lee began inventing HTML code, he didn’t start by creating a new spoken language and a new alphabet. He used what he already knew and had available, in this case, the English language and alphabet. HTML code, as well as nearly every other computer language used online, is based on English words typed on a Roman keyboard. HTML is mostly English words, or parts of English words, typed inside brackets. This remains true for other languages today. For example, the code for blinking text is the word &#60;blink&#62;. The code for bold text was originally the word &#60;bold&#62;, often shortened to &#60;b&#62; and later inexplicably changed to &#60;strong&#62;. When developers from non-Western countries want to create Web pages, they must write code written in Roman text based on the English language. This is not as difficult as it sounds; because so much computing technology originated in the West, many computer keyboards in non-Western countries consist of roman letters with local characters added.</p>

<p>What does this mean? Well, perhaps it means that the world is even more geared towards English than previously thought. And with it, the web. For example, languages written in the Roman alphabet read left-to-right. People who read western languages are primed to write code left-to-right. That&rsquo;s why Ruby contains things like &lt;%stuff.each do |s|%> puts s&lt;%end%> , which only makes sense when read left-to-right, instead of &lt;%end%> puts s &lt;%stuff each do|s|%>, which only makes sense when read right-to-left. There&rsquo;s nothing inherently better about considering things starting from the left or the right, or indeed from the top or the bottom, but people who were building the structures on which the Internet rests set it up this way because they based their decisions on what they already knew.</p>

<p>I originally investigated this issue at the behest of an international law professor with an anthropology background who wanted me to learn what &ldquo;biases are built into the web&rdquo;. I&rsquo;d initially thought there weren&rsquo;t any, that the web was a just and utopian place. I initially searched for academic articles on the Internet in world affairs. They barely existed, and roughly half of those that did exist were written by <a href="http://timwu.org/" target="_blank">Columbia&rsquo;s Tim Wu</a>. (Thanks, Tim!) I finally realized that
I could simply take a sampling of foreign newspapers and read their source code online. And with it, I found a number of comments to fellow programmers in characters I could not understand at all, as well as lots and lots of HTML, which I could read perfectly well because they were in essentially in English.</p>

<p>I&rsquo;m not really sure where this leaves us &ndash; there have been fabulous advances in technology since HTML was invented, almost all of which have built on the Romanji, left-to-right technology, and there&rsquo;s clearly no going back. Still, it&rsquo;s worth considering what&rsquo;s been lost. For example, it only <a href="http://techcrunch.com/2010/05/06/web-now-supports-non-latin-characters-for-addresses/" target="_blank">became possible to write URLs in non-Roman characters</a> in 2010. I tried to visit a web page that Tech Crunch linked to as an example of a non-Roman url, but could not, because the reviewer did not understand the address and so entered it as a relative link.</p>

<p><em>This blog post is based on a <a href="http://katiebarry.com/writing.html#stv_content_13" target ="_blank">paper I wrote in grad school</a> on the Internet and International law, which fed into a <a href="http://katiebarry.com/writing.html#stv_content_14" target ="_blank">thesis on the Internet and democratization</a>. You should read them.</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[8th Grade Math and Navigating the Globe]]></title>
    <link href="http://katieishibashi.github.io/blog/2013/07/11/8th-grade-math-and-navigating-the-globe/"/>
    <updated>2013-07-11T09:19:00-04:00</updated>
    <id>http://katieishibashi.github.io/blog/2013/07/11/8th-grade-math-and-navigating-the-globe</id>
    <content type="html"><![CDATA[<p>For my team&rsquo;s presentation to the Ruby meetup, we&rsquo;ve been working on an app  that will help people navigate NYC&rsquo;s Citibike program, using a mashup of Google maps and Citibike&rsquo;s publicly available JSON location data. By way of navigation, the JSON includes street address, latitude, and longitude of each location.</p>

<p>Our initial prototype let users pick start and end points from a dropdown menu of Citibike locations and mapped the distance between them on the map. This was hardly ideal &ndash; very few people orient themselves in a city on the basis of bike locations &ndash; so one of the first things we wanted to give users was the ability to input a street address and have the app automatically find the Citibike stations around them.</p>

<p>It was a sensible idea, albiet one I had no idea how to implement. It was then that my groupmate discovered <a href="http://dangoldin.com/citibike-station-directions/" target="_blank">this implementation</a> of a Citibike/Google maps mashup that does exactly that. Thanks, Internet! We found this in the JavaScript source code:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  function getDistance(lat1,lng1,lat2,lng2) {
</span><span class='line'>      var i = lat1 - lat2;
</span><span class='line'>      var j = lng1 - lng2;
</span><span class='line'>      return i*i + j*j;
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    function findNearestStation(lat,lng) {
</span><span class='line'>      var min_distance = 99999;
</span><span class='line'>      var closest_station_id;
</span><span class='line'>      $.each(stations.stationBeanList, function(i, station) {
</span><span class='line'>        var distance = getDistance(lat,lng, station.latitude, station.longitude);
</span><span class='line'>
</span><span class='line'>        if (distance &lt; min_distance) {
</span><span class='line'>          min_distance = distance;
</span><span class='line'>          closest_station_id = i;
</span><span class='line'>        }
</span><span class='line'>      });
</span><span class='line'>
</span><span class='line'>      console.log('Closest station idx: ' + closest_station_id);
</span><span class='line'>
</span><span class='line'>      return stations.stationBeanList[closest_station_id];
</span><span class='line'>    }</span></code></pre></td></tr></table></div></figure>


<p>I&rsquo;d expected a massive operation, and this was breathtakingly simple. It simply loops through all the stations, gets each one&rsquo;s latitude and longitude, compares the current station to the closest station it has found so far. It was this &ldquo;closeness&rdquo; calculation that I was most interested in. JavaScript was comparing it using a numercal value, but how did it get that number? Well, it&rsquo;s all figured out the closeness of the station using the 5-line getDistance function. getDistance which compares the station&rsquo;s longitude and latitude to the user&rsquo;s using this code:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  var i = lat1 - lat2;
</span><span class='line'>  var j = lng1 - lng2;
</span><span class='line'>  return i*i + j*j;</span></code></pre></td></tr></table></div></figure>


<p>Why subtract latitude from latitude and longitude from longitude? The difference between latitude a and latitude b is the distance between them. Granted, it&rsquo;s a difference measured in&hellip;latitude units, but it&rsquo;s a distance nonetheless, and we actually don&rsquo;t need to more precision here. If the distance between my location and station x is .123 latitude units and the distance between my location and station y is .01 latitude units, then station y is closer. That&rsquo;s all we need to know. &ldquo;Latitude units&rdquo; work perfectly well for this purpose.</p>

<p><img src="http://upload.wikimedia.org/wikipedia/commons/thumb/f/fb/Pythagoras_similar_triangles_simplified.svg/200px-Pythagoras_similar_triangles_simplified.svg.png" style="float:left; margin:10px;">The same logic works perfectly well for longitude, but I didn&rsquo;t initially understand why we were returning latitude<sup>2</sup> and longitude<sup>2</sup>, but then it hit me &ndash; latitude runs perfectly east-west, and longitude runs perfectly north-south. When they meet, they create a perfect right angle, and therefore, we can use&hellip;.Pythagorean theorem. a<sup>2</sup>+b<sup>2</sup>=c<sup>2</sup> . You can get the hypotenuse of a triangle by multiplying the lengths of its sides.</p>

<p>The advantage of considering the hypotenuse of our right triangles is it lets us perfectly average out our longitude/latitude differences. For example, my location may be very close latitude as a bike station but be very far away in longitude. Or it may be on a similar longitude but on a very different latitude. Or else it may be on a similar latitude and longitude. Whatever. By calculating c <sup>2</sup>, we&rsquo;re averaging out the differences.</p>

<p>And that alone is enough to let us calculate the distance.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Towing Mozilla]]></title>
    <link href="http://katieishibashi.github.io/blog/2013/06/25/towing-mozilla/"/>
    <updated>2013-06-25T23:22:00-04:00</updated>
    <id>http://katieishibashi.github.io/blog/2013/06/25/towing-mozilla</id>
    <content type="html"><![CDATA[<p>Before learning of <a href="https://mozillalabs.com/en-US/towtruck/"target="_blank">Mozilla TowTruck</a>  in class today, my experience of real time online collaboration tools had been limited to spreadsheets on Google Drive. And even that emerged recently enough that I could quickly resurrect gchats with remarks like “OMG! I CAN SEE YOU HIGHLIGHTING THAT ROW ON THE SPREADSHEET!” Working in real time on anything, at all, is still relatively new.</p>

<p>And now, says Mozilla Labs, it is much improved. They’ve released TowTruck, a collaboration tool that enables you to watch as another user’s key and mouse strokes on a web page in the same color-coded, user-labelled ways that Google lets you follow another user’s changes to a spreadsheet on Drive. . It was originally intended as an aid for budding web developers, which lead to its name &ndash; “TowTruck – who you call when you got stuck” . It can be installed by adding a two lines of JavaScript to a page in production, and gives users the option of communicating by text, audio chat, or video. Or at least that is the idea. I was ready to jump on the TowTruck bandwagon until I noticed that <a href="https://towtruck.mozillalabs.com/example/" target="_blank">the main example links</a> on its web site lead to 404s. Newly skeptical, I decided to scour the Internet in search of more insight.</p>

<h3>The Results</h3>


<p>In a nutshell, the online verdict is TowTruck looks promising, but is far from perfect. Mozilla says the system should still be considered “alpha quality” and not yet ready to be used in serious production. <a href="http://www.noupe.com/javascript/mozilla-labs-towtruck-brand-new-real-time-collaboration-tool-tested-76010.html">This excellent review</a> that said TowTruck was indeed surprisingly easy to use. It’s easy to install, to invite collaborators, and audio quality was generally good. The text chat does indeed work across browsers and operating systems, but the audio chat between two computers gets wonky when neither computer is using Firefox. It’s presently only possible to use between two computers, and hasn’t really been tested on mobile.</p>

<p>The project is open source, so theoretically anyone could improve it at any time. TowTruck is similar to Google Drive because it <a href="http://www.informationweek.com/development/web/mozilla-towtruck-drives-real-time-collab/240152957">borrows from Google Drive</a> , which made its Real Time collaboration technology open source.</p>

<p>The company promises more mobile support in 2013. It’s not quite “there” yet, but if it continues to develop, this tool could be a big part of our lives, soon.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Inside a Sinatra Gem]]></title>
    <link href="http://katieishibashi.github.io/blog/2013/06/23/inside-a-sinatra-gem/"/>
    <updated>2013-06-23T12:14:00-04:00</updated>
    <id>http://katieishibashi.github.io/blog/2013/06/23/inside-a-sinatra-gem</id>
    <content type="html"><![CDATA[<p>In preparation for learning Sinatra next week, I&rsquo;ve gone poking through through <a href="https://github.com/holman/bubs">this example of a Sinatra gem</a> that I found on Github. It seemed the ideal first investigation. It&rsquo;s simple &ndash; it&rsquo;s only function is to write obnoxious text in a command line to annoy one&rsquo;s coworkers ( a win in itself), and it&rsquo;s named after the character Bubs from The Wire.</p>

<p>The structure reminds me of poking through video game folders on my computer, trying to <strikethrough>cheat</strikethrough> improve my technical skills. In an homage to my video game days, I decided to poke around and try to figure out as much as I could on my own.</p>

<p>The app has two main folders, lib and bin. Lib is clearly the folder that actually does things. Remember, this is an incredibly simple app. It contains exactly one file, which contains exactly one class, Bubs. Bubs&#8217; main job is converting regular text into annoy-text, which it does in only one line: text.tr(&lsquo;A-Za-a1-90&rsquo;, &lsquo;A-Za z1-90&rsquo;) . That&rsquo;s pretty much it, except for a bit of code at the bottom designed to make annoy-text pleasant to all systems.</p>

<p>The bin side is dependent on some code I&rsquo;ve never heard of, so I have to break my no-Google pledge and look it up. ( $stdin can be used to hold code inputted from a console, thank you Ruby Docs.) It looks entirely focused on the outside, taking content from the user, passing it to Bubs for him to work his magic, and then giving it back to the user. It&rsquo;s entirely focused on the user&rsquo;s perspective.</p>

<p>There are also a few files on the root directory. README and LICENSE seem self-explanatory, but there are more mysterious files. There&rsquo;s a Rakefile, which seemed to be concerned with record keeping and checking to make sure things exist and can be connected to. There&rsquo;s also a gemfile, which looks to be concerned with telling whatever interface runs Ruby Gems all it needs to know about itself, and introducing the other files. It tells Gems where its executable files are, gives a list of all its files, and as well as its name/date created/whatever else functions. It is the extroverted greeter of Rootdirectoryland. There&rsquo;s also something called gitignore which seems to be the robots.txt of the git world.</p>

<p>At the end of my exhaustive tour, I feel I&rsquo;ve gained a good sense of the basic files and what they do. Reconnaissance indicates that there are far more complicated structures out there, with folders packed with more folders, but hopefully this basic understanding will carry me through.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Me Code Pretty One Day]]></title>
    <link href="http://katieishibashi.github.io/blog/2013/06/16/me-code-pretty-one-day/"/>
    <updated>2013-06-16T05:59:00-04:00</updated>
    <id>http://katieishibashi.github.io/blog/2013/06/16/me-code-pretty-one-day</id>
    <content type="html"><![CDATA[<p>I had a computer science professor in college who would subtract massive amounts of points for improperly formatted code. This led to heroic tabbing on my part, but I always felt slightly resentful about it. It&rsquo;s code! It runs the same whether you indent it or not! Computers don&rsquo;t care, and these are the same OCD snobs that reject otherwise perfect code for want of a &ldquo;;&rdquo; or perhaps a misplaced &ldquo;)&rdquo;.</p>

<p>I was impressed, however, when I ran across <a href="https://speakerdeck.com/florent2/beautiful-ruby-code-formatting" target="_blank"> this presentation on beautifully formatted Ruby</a> on SpeakerDeck.com . It was really so…beautiful. Even a curmudgeon like myself could appreciate the difference between this:</p>

<p><img src="../images/code_ugly.jpg"></p>

<p>and this:</p>

<p><img src="../images/code_pretty.png"></p>

<p>Rather than slowly try to figure out which piece belongs to which, and what on Earth :record_class is, we have a simple, easy to understand block, with all the relations listed hierarchically, teaching us a great deal about the structure of the code, and the site it supports, in one glance. I&rsquo;ve studied a bit of design and gotten a good appreciation for the importance of things like text alignment and style on the front end of web pages, but have rarely thought about the importance of style on the back end. This provides a fresh perspective &ndash; code doesn&rsquo;t just exist to communicate with computers. After all, the best way to communicate with computers would be a series of 0s and 1s. It&rsquo;s designed to communicate with programmers, and the same visual design rules apply, even if the public never sees it.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Playing Well With Others]]></title>
    <link href="http://katieishibashi.github.io/blog/2013/06/10/playing-well-with-others/"/>
    <updated>2013-06-10T00:00:00-04:00</updated>
    <id>http://katieishibashi.github.io/blog/2013/06/10/playing-well-with-others</id>
    <content type="html"><![CDATA[<p>Group coding at The Flatiron School was new to me. I&rsquo;ve had several jobs in the past that have involved coding, and they have never been exactly social. Generally, I would meet with non-techies to find out what kind of web thing they, and go back to my desk and make said thing. That was the entire action sequence. I learned a lot this way, in part because the nonprofits I worked for often had no one else on staff who could solve a problem. It was me and Google. I learned quite a bit this way, though this meant I had to learn much later in life not to write code that irritates other programmers. Someday, I shall introduce you to my session variable named George.</p>

<p>The biggest drawback to being a lone wolf is you completely miss the osmosis-type learning that occurs when you have other coders around you. If a technique did not come up when you were frantically searching Google for answers, you can easily miss it entirely. It&rsquo;s also true that there&rsquo;s no one to cross-examine you, and it&rsquo;s easy to stop working once the damn thing works, even if it&rsquo;s massively inefficient.</p>

<p>When I came to Flatiron, The closest I&rsquo;ve ever come to collaborating with someone on a web endeavor has been something like &ldquo;OK, you do the navigation, and I&rsquo;ll do the footer.&rdquo;</p>

<h2>Pros</h2>


<p><strong>Different strengths</strong>
This includes the obvious, like people knowing languages you don&rsquo;t know, but also people who think in a different way than you do. I&rsquo;ve only been team coding for a week, and already there have been several times when I&rsquo;ve watched others easily solve problems that had me staring blankly, and vice versa.</p>

<p><strong>Your random eccentricities don&rsquo;t seep into code as much</strong>
There&rsquo;s no way you could get away with naming a variable George in a group.</p>

<p><strong>It&rsquo;s ridiculously easy to ask for help.</strong>
At Flatiron, we often hear a lecture on a topic and then go to code in a group, and if there&rsquo;s something in the lecture I don&rsquo;t understand, there&rsquo;s always someone in the group who can explain it to me.</p>

<p><strong>Group jokes!</strong>
We just wrote a program that tells the user it&rsquo;s deleting their entire hard drive if they enter invalid input, and then stuck it on some likely marks. It was AMAZING. I occasionally tried to do this when I was on my own, but the joy did not compare. Jokes are funnier with many people in on them.</p>

<h2>Cons</h2>


<p><strong>Other people&rsquo;s random eccentricities sneak into the code, and you will not find them as charming as your own eccentricities</strong>
Even though it&rsquo;s harder to put your own eccentric touch on code in a group (Hi, George!), you do sometimes get outvoted in a group, and then have to sit there as the group goes down what you view as a strange path. There is very little you can do about this.</p>

<p><strong>When a group gets bogged down, it REALLY gets bogged down</strong>
Taking major coding detours as an individual is bad enough, but taking an irrelevant detour with the weight of four, really hard core people speeding along Detour Road means that you can get SERIOUSLY bogged down. You can write not only write test code to implement your detour, you can write four different versions of it, and then you can sit around discussing  all of them for hours.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ZOOM]]></title>
    <link href="http://katieishibashi.github.io/blog/2013/06/05/zoom/"/>
    <updated>2013-06-05T13:07:00-04:00</updated>
    <id>http://katieishibashi.github.io/blog/2013/06/05/zoom</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Goat cheese]]></title>
    <link href="http://katieishibashi.github.io/blog/2013/06/05/goat-cheese/"/>
    <updated>2013-06-05T13:07:00-04:00</updated>
    <id>http://katieishibashi.github.io/blog/2013/06/05/goat-cheese</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Am I doing this right?]]></title>
    <link href="http://katieishibashi.github.io/blog/2013/06/05/am-i-doing-this-right/"/>
    <updated>2013-06-05T13:00:00-04:00</updated>
    <id>http://katieishibashi.github.io/blog/2013/06/05/am-i-doing-this-right</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Zombie Ninjas Attack: A survivor's retrospective]]></title>
    <link href="http://katieishibashi.github.io/blog/2013/06/05/zombie-ninjas-attack-a-survivors-retrospective/"/>
    <updated>2013-06-05T11:05:00-04:00</updated>
    <id>http://katieishibashi.github.io/blog/2013/06/05/zombie-ninjas-attack-a-survivors-retrospective</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[title]]></title>
    <link href="http://katieishibashi.github.io/blog/2013/06/05/title/"/>
    <updated>2013-06-05T11:05:00-04:00</updated>
    <id>http://katieishibashi.github.io/blog/2013/06/05/title</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
</feed>
